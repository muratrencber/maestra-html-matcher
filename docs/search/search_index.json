{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick Start Run Run command: python main.py \"target_file_path\" \"reference_file_path\" \"instruction_file_path\" -e envvar1=envval1 -e envvar2=envval2 -o \"output_file_path\" If you want to print debug information, add the -d flag. Examples Maestra Head Change Target file: <head> <title> Online Subtitle Translator & Editor in 80+ Languages | Maestra </title> <meta name=\"description\" content=\"Generate, edit and translate subtitles online using Maestra\u2019s dedicated subtitle editor. Widen your reach by translating your subtitles to over 80 languages.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"Online Subtitle Translator & Editor in 80+ Languages | Maestra\" /> <meta property=\"og:description\" content=\"Generate, edit and translate subtitles online using Maestra\u2019s dedicated subtitle editor. Widen your reach by translating your subtitles to over 80 languages.\" /> <meta property=\"og:url\" content=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"stylesheet\" href=\"../../assets/template/css/reset.css\"> <link rel=\"stylesheet\" href=\"../../assets/template/css/fonts.css\"> <link rel=\"stylesheet\" href=\"../../assets/template/css/style.css\"> </head> Reference file: <head> <meta name=\"description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"\u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627\" /> <meta property=\"og:description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <meta property=\"og:url\" content=\"https://maestrasuite.com/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestrasuite.com/subtitle-translator\" /> <title> \u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627 </title> <link rel=\"stylesheet\" href=\"../assets/template/css/maestra.css\" id=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"../assets/template/css/rtl.css\" id=\"stylesheet\" /> </head> Applying the instructions: #treplace \"\\\"../../assets\" \"\\\"/assets\" %head% <-> %%: %title% = %title% %meta[name=\"description\"]%.content = %meta[name=\"description\"]%.content %meta[name=\"description\"]%.content = %meta[name=\"description\"]%.content %meta[property=\"og:title\"]%.content = %meta[property=\"og:title\"]%.content %meta[property=\"og:description\"]%.content = %meta[property=\"og:description\"]%.content Result: <head> <title> \u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627 </title> <meta name=\"description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"\u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627\" /> <meta property=\"og:description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <meta property=\"og:url\" content=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"stylesheet\" href=\"/assets/template/css/reset.css\"> <link rel=\"stylesheet\" href=\"/assets/template/css/fonts.css\"> <link rel=\"stylesheet\" href=\"/assets/template/css/style.css\"> </head>","title":"Quick Start"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#run","text":"Run command: python main.py \"target_file_path\" \"reference_file_path\" \"instruction_file_path\" -e envvar1=envval1 -e envvar2=envval2 -o \"output_file_path\" If you want to print debug information, add the -d flag.","title":"Run"},{"location":"#examples","text":"","title":"Examples"},{"location":"#maestra-head-change","text":"Target file: <head> <title> Online Subtitle Translator & Editor in 80+ Languages | Maestra </title> <meta name=\"description\" content=\"Generate, edit and translate subtitles online using Maestra\u2019s dedicated subtitle editor. Widen your reach by translating your subtitles to over 80 languages.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"Online Subtitle Translator & Editor in 80+ Languages | Maestra\" /> <meta property=\"og:description\" content=\"Generate, edit and translate subtitles online using Maestra\u2019s dedicated subtitle editor. Widen your reach by translating your subtitles to over 80 languages.\" /> <meta property=\"og:url\" content=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"stylesheet\" href=\"../../assets/template/css/reset.css\"> <link rel=\"stylesheet\" href=\"../../assets/template/css/fonts.css\"> <link rel=\"stylesheet\" href=\"../../assets/template/css/style.css\"> </head> Reference file: <head> <meta name=\"description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"\u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627\" /> <meta property=\"og:description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <meta property=\"og:url\" content=\"https://maestrasuite.com/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestrasuite.com/subtitle-translator\" /> <title> \u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627 </title> <link rel=\"stylesheet\" href=\"../assets/template/css/maestra.css\" id=\"stylesheet\" /> <link rel=\"stylesheet\" href=\"../assets/template/css/rtl.css\" id=\"stylesheet\" /> </head> Applying the instructions: #treplace \"\\\"../../assets\" \"\\\"/assets\" %head% <-> %%: %title% = %title% %meta[name=\"description\"]%.content = %meta[name=\"description\"]%.content %meta[name=\"description\"]%.content = %meta[name=\"description\"]%.content %meta[property=\"og:title\"]%.content = %meta[property=\"og:title\"]%.content %meta[property=\"og:description\"]%.content = %meta[property=\"og:description\"]%.content Result: <head> <title> \u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627 </title> <meta name=\"description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <!-- Facebook Tags --> <meta property=\"og:title\" content=\"\u0645\u062a\u0631\u062c\u0645 \u0648\u0645\u062d\u0631\u0631 \u0644\u0644\u062a\u0631\u062c\u0645\u0627\u062a \u0623\u0648\u0646\u0644\u0627\u064a\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629 | \u0645\u0627\u064a\u0633\u062a\u0631\u0627\" /> <meta property=\"og:description\" content=\"\u0642\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u0648\u062a\u0639\u062f\u064a\u0644 \u0648\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u062d\u0631\u0631 \u0627\u0644\u062a\u0631\u062c\u0645\u0629 \u0627\u0644\u0645\u062e\u0635\u0635 \u0645\u0646 \u0645\u0627\u064a\u0633\u062a\u0631\u0627. \u0648\u0633\u0651\u0639 \u0646\u0637\u0627\u0642 \u0648\u0635\u0648\u0644\u0643 \u0645\u0646 \u062e\u0644\u0627\u0644 \u062a\u0631\u062c\u0645\u0629 \u062a\u0631\u062c\u0645\u0627\u062a\u0643 \u0625\u0644\u0649 \u0623\u0643\u062b\u0631 \u0645\u0646 80 \u0644\u063a\u0629.\" /> <meta property=\"og:url\" content=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"canonical\" href=\"https://maestra.ai/tools/subtitle-translator\" /> <link rel=\"stylesheet\" href=\"/assets/template/css/reset.css\"> <link rel=\"stylesheet\" href=\"/assets/template/css/fonts.css\"> <link rel=\"stylesheet\" href=\"/assets/template/css/style.css\"> </head>","title":"Maestra Head Change"},{"location":"instructions/","text":"Manipulations Generally, manipulation operations consist of two blocks: do something on the target operator do something on the reference Left side is for the target, and the right side is for the reference HTML. Assignment Gets the attribute/innerHTML/text value from the specified reference HTML element(s) and assigns it to the specified target element attribute(s)/innerHTML(s)/text(s). Usage: %<CSS selector for target>%([index | from:to])(.attribute) = %<CSS selector for reference>%([index | from:to])(.attribute) %<CSS selector for target>%([index | from:to])(.attribute) = \"<some string>\" %<CSS selector for target>%([index | from:to])(.attribute) = f\"some {formatted} string\" If assignments are for multiple elements, the assignment loops for min size. Example: Let the initial context be: For target: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>CSS</p></div> </div> For reference: <ul> <li>I</li> <li>Really</li> <li>Hate</li> <li>Styled Divs</li> </ul> Let's say we wanted to get the texts from the reference and assign them to the target. Note that the reference has an additional element which we want to exclude. Test 1 %div.div-list-element p%[0].text = %ul li%[0].text %div.div-list-element p%[1].text = %ul li%[2].text %div.div-list-element p%[2].text = %ul li%[3].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>Styled Divs</p></div> </div> Test 2 %div.div-list-element p%[:].text = %ul li%[:].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Really</p></div> <div class=\"div-list-element\"><p>Hate</p></div> </div> Test 3 %div.div-list-element p%[0].text = %ul li%[0].text %div.div-list-element p%[1:].text = %ul li%[2:].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>Styled Divs</p></div> </div> Context Change Changes the current HTML root for the indented subinstructions. Usage: %<CSS selector for target>%([index | from:to]) <-> %<CSS selector for reference>%([index | from:to]) If selectors are selecting multiple elements, the subinstructions loop for the minimum size. Examples: Target file initial context: <div class=\"a\"> <div>Something</div> <div> <p>Other thing</p> </div> <div>This is empty</div> </div> Reference file initial context: <div class=\"container\"> <div class=\"xyz\"> <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> </div> </div> Applying: %div.a% <-> %div.container%: %% <-> %div.xyz%: ... %div%[1] <-> %div%: ... Let's inspect it line by line. After applying the first line, new contexts are: For target file: <div>Something</div> <div> <p>Other thing</p> </div> <div>This is empty</div> For reference file: <div class=\"xyz\"> <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> </div> After applying the second line: Target file: Nothing changed, note that the CSS selector was empty. Reference file: <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> Then there is a dummy line ... . Let's assume that some operations are applied in this line. After this line, we go 4 tabs back, this means we got back to the context resulted from the first line. After applying the second subinstruction of the first line (which is %div%[1] <-> %div%: ) the new context is: For target file: <p>Other thing</p> For reference file: <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> Insertion Inserts the specified HTML string as the target context child. Usage: +<html string>+ Example: Target context: <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> </ul> Applying: %ul% <-> %%: +<li>dummy</li>+ %ul li%[4] = \"Item 5\" First line changes the context to: <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> After the second line: <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> <li>dummy</li> Third line goes back one tab, context is restored to the original one. Then we are selecting the 5th element and changing its contents with a literal string. Result: <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> <li>Item 5</li> </ul> Commands All commands start with the # prefix. Some may also have the prefix t or r depending on which file will they operate. Dictionary Command Usage: #addict <path to json file> Reads the JSON file from the specified path and appends all of its elements to the root of the dictionary of the matcher. Note that the dictonary of the matcher always has the environ key, which is populated with the given environment variables when running the program. For example: python main.py <target path> <reference path> <instruction path> -e myvar=test -e myvar2=test -o <output path> Initially the matcher dictionary is: { \"environ\": { \"myvar\": \"test\", \"myvar2\": \"test\" } } This gives great flexibility when specifying the dictionary path. Here is another example: python main.py <target path> <reference path> <instruction path> -e lang=ar -o <output path> Initial dictionary: { \"environ\": { \"lang\": \"ar\" } } Then, we can dynamically load the target language dictionary with the formatted string. The file dicts/ar.json : { \"name\": \"\u0639\u0631\u0628\u064a\", \"flag\": \"sa\", \"button_text\":\"\u0645\u0644\u0641 \u0627\u0644\u0627\u0633\u062a\u0639\u0631\u0627\u0636\", \"notice_text\":\"* \u0644\u0627 \u064a\u0644\u0632\u0645 \u0648\u062c\u0648\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0626\u062a\u0645\u0627\u0646 \u0623\u0648 \u062d\u0633\u0627\u0628\", \"brands-using\":\"\u0627\u0644\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 Maestra:\" } Command: #addict f\"dicts/{environ.lang}.json\" which is equivalent to #addict \"dicts/ar.json\" After the command is applied, the matcher dictionary is: { \"environ\": { \"lang\": \"ar\" }, \"name\": \"\u0639\u0631\u0628\u064a\", \"flag\": \"sa\", \"button_text\":\"\u0645\u0644\u0641 \u0627\u0644\u0627\u0633\u062a\u0639\u0631\u0627\u0636\", \"notice_text\":\"* \u0644\u0627 \u064a\u0644\u0632\u0645 \u0648\u062c\u0648\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0626\u062a\u0645\u0627\u0646 \u0623\u0648 \u062d\u0633\u0627\u0628\", \"brands-using\":\"\u0627\u0644\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 Maestra:\" } Replace Command Replaces the html string of target or reference file according to the given arguments. Usage: #(t|r)replace <old string> <new string> The prefix determines which file content will be replaced. #treplace replaces the contents of target file, while #rreplace replaces the contents of the reference file. Example: Target text: <body> <div> Lorem ipsum dolor sit amet </div> </body> #treplace \"<div>\" \"<p>\" #treplace \"</div>\" \"</p>\" Result: <body> <p> Lorem ipsum dolor sit amet </p> </body> String arguments can be formatted too. Example: Dictionary: \"heading\": { \"text\": \"Testing\", \"data\": 0451 }, \"date\": \"2023-06-08\" Reference text: <head> <title>My Page</title> ... </head> Applying command #rreplace \"My Page\" f\"{heading.text} Page: {date}\" results: <head> <title>Testing Page: 2023-06-08</title> ... </head> Remove Command Removes the specified HTML element(s) of the target or reference file according to the given CSS selector. Usage: #(t|r)remove %<CSS selector string>% #(t|r)remove %<CSS selector string>%[index] #(t|r)remove %<CSS selector string>%[from:to] Examples: #rremove %img%[:] : Removes all images from the reference HTML. #tremove %div.yt-sec% : Removes the first div element having the class name yt-sec from the target HTML. Translate Command Translates the specified HTML element(s) of the target file according to the given CSS selector and the environment variable lang . Uses Google Translate. Note: this command slows down the matching process severely. Usage: #translate %<CSS selector string>% #translate %<CSS selector string>%[index] #translate %<CSS selector string>%[from:to] Include Command Directly replaces itself with the contents of the file it was pointing to. Usage: #include <path to another instruction file> Example: Contents of ./std/hremovers/h1remove.match: #tremove %h1%[:] Contents of ./std/hremovers/h2remove.match: #tremove %h2%[:] Contents of ./std/hremove.match: #include <hremovers/h1remove.match> #include <hremovers/h2remove.match> Contents of ./main.match: #include <std/hremove.match> %img%[:].alt = %img%[:].alt After applying all the includes: Contents of ./main.match: #tremove %h1% #tremove %h2% %img%[:].alt = %img%[:].alt","title":"Manipulations"},{"location":"instructions/#manipulations","text":"Generally, manipulation operations consist of two blocks: do something on the target operator do something on the reference Left side is for the target, and the right side is for the reference HTML.","title":"Manipulations"},{"location":"instructions/#assignment","text":"Gets the attribute/innerHTML/text value from the specified reference HTML element(s) and assigns it to the specified target element attribute(s)/innerHTML(s)/text(s). Usage: %<CSS selector for target>%([index | from:to])(.attribute) = %<CSS selector for reference>%([index | from:to])(.attribute) %<CSS selector for target>%([index | from:to])(.attribute) = \"<some string>\" %<CSS selector for target>%([index | from:to])(.attribute) = f\"some {formatted} string\" If assignments are for multiple elements, the assignment loops for min size. Example: Let the initial context be: For target: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>CSS</p></div> </div> For reference: <ul> <li>I</li> <li>Really</li> <li>Hate</li> <li>Styled Divs</li> </ul> Let's say we wanted to get the texts from the reference and assign them to the target. Note that the reference has an additional element which we want to exclude.","title":"Assignment"},{"location":"instructions/#test-1","text":"%div.div-list-element p%[0].text = %ul li%[0].text %div.div-list-element p%[1].text = %ul li%[2].text %div.div-list-element p%[2].text = %ul li%[3].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>Styled Divs</p></div> </div>","title":"Test 1"},{"location":"instructions/#test-2","text":"%div.div-list-element p%[:].text = %ul li%[:].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Really</p></div> <div class=\"div-list-element\"><p>Hate</p></div> </div>","title":"Test 2"},{"location":"instructions/#test-3","text":"%div.div-list-element p%[0].text = %ul li%[0].text %div.div-list-element p%[1:].text = %ul li%[2:].text Result: <div class=\"div-list\"> <div class=\"div-list-element\"><p>I</p></div> <div class=\"div-list-element\"><p>Hate</p></div> <div class=\"div-list-element\"><p>Styled Divs</p></div> </div>","title":"Test 3"},{"location":"instructions/#context-change","text":"Changes the current HTML root for the indented subinstructions. Usage: %<CSS selector for target>%([index | from:to]) <-> %<CSS selector for reference>%([index | from:to]) If selectors are selecting multiple elements, the subinstructions loop for the minimum size. Examples: Target file initial context: <div class=\"a\"> <div>Something</div> <div> <p>Other thing</p> </div> <div>This is empty</div> </div> Reference file initial context: <div class=\"container\"> <div class=\"xyz\"> <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> </div> </div> Applying: %div.a% <-> %div.container%: %% <-> %div.xyz%: ... %div%[1] <-> %div%: ... Let's inspect it line by line. After applying the first line, new contexts are: For target file: <div>Something</div> <div> <p>Other thing</p> </div> <div>This is empty</div> For reference file: <div class=\"xyz\"> <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> </div> After applying the second line: Target file: Nothing changed, note that the CSS selector was empty. Reference file: <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p> Then there is a dummy line ... . Let's assume that some operations are applied in this line. After this line, we go 4 tabs back, this means we got back to the context resulted from the first line. After applying the second subinstruction of the first line (which is %div%[1] <-> %div%: ) the new context is: For target file: <p>Other thing</p> For reference file: <p>Bir \u015feyler</p> <p>\u00d6b\u00fcr \u015feyler</p> <p>Bu da bo\u015f</p>","title":"Context Change"},{"location":"instructions/#insertion","text":"Inserts the specified HTML string as the target context child. Usage: +<html string>+ Example: Target context: <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> </ul> Applying: %ul% <-> %%: +<li>dummy</li>+ %ul li%[4] = \"Item 5\" First line changes the context to: <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> After the second line: <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> <li>dummy</li> Third line goes back one tab, context is restored to the original one. Then we are selecting the 5th element and changing its contents with a literal string. Result: <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Item 4</li> <li>Item 5</li> </ul>","title":"Insertion"},{"location":"instructions/#commands","text":"All commands start with the # prefix. Some may also have the prefix t or r depending on which file will they operate.","title":"Commands"},{"location":"instructions/#dictionary-command","text":"Usage: #addict <path to json file> Reads the JSON file from the specified path and appends all of its elements to the root of the dictionary of the matcher. Note that the dictonary of the matcher always has the environ key, which is populated with the given environment variables when running the program. For example: python main.py <target path> <reference path> <instruction path> -e myvar=test -e myvar2=test -o <output path> Initially the matcher dictionary is: { \"environ\": { \"myvar\": \"test\", \"myvar2\": \"test\" } } This gives great flexibility when specifying the dictionary path. Here is another example: python main.py <target path> <reference path> <instruction path> -e lang=ar -o <output path> Initial dictionary: { \"environ\": { \"lang\": \"ar\" } } Then, we can dynamically load the target language dictionary with the formatted string. The file dicts/ar.json : { \"name\": \"\u0639\u0631\u0628\u064a\", \"flag\": \"sa\", \"button_text\":\"\u0645\u0644\u0641 \u0627\u0644\u0627\u0633\u062a\u0639\u0631\u0627\u0636\", \"notice_text\":\"* \u0644\u0627 \u064a\u0644\u0632\u0645 \u0648\u062c\u0648\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0626\u062a\u0645\u0627\u0646 \u0623\u0648 \u062d\u0633\u0627\u0628\", \"brands-using\":\"\u0627\u0644\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 Maestra:\" } Command: #addict f\"dicts/{environ.lang}.json\" which is equivalent to #addict \"dicts/ar.json\" After the command is applied, the matcher dictionary is: { \"environ\": { \"lang\": \"ar\" }, \"name\": \"\u0639\u0631\u0628\u064a\", \"flag\": \"sa\", \"button_text\":\"\u0645\u0644\u0641 \u0627\u0644\u0627\u0633\u062a\u0639\u0631\u0627\u0636\", \"notice_text\":\"* \u0644\u0627 \u064a\u0644\u0632\u0645 \u0648\u062c\u0648\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0626\u062a\u0645\u0627\u0646 \u0623\u0648 \u062d\u0633\u0627\u0628\", \"brands-using\":\"\u0627\u0644\u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0629 \u0627\u0644\u062a\u064a \u062a\u0633\u062a\u062e\u062f\u0645 Maestra:\" }","title":"Dictionary Command"},{"location":"instructions/#replace-command","text":"Replaces the html string of target or reference file according to the given arguments. Usage: #(t|r)replace <old string> <new string> The prefix determines which file content will be replaced. #treplace replaces the contents of target file, while #rreplace replaces the contents of the reference file. Example: Target text: <body> <div> Lorem ipsum dolor sit amet </div> </body> #treplace \"<div>\" \"<p>\" #treplace \"</div>\" \"</p>\" Result: <body> <p> Lorem ipsum dolor sit amet </p> </body> String arguments can be formatted too. Example: Dictionary: \"heading\": { \"text\": \"Testing\", \"data\": 0451 }, \"date\": \"2023-06-08\" Reference text: <head> <title>My Page</title> ... </head> Applying command #rreplace \"My Page\" f\"{heading.text} Page: {date}\" results: <head> <title>Testing Page: 2023-06-08</title> ... </head>","title":"Replace Command"},{"location":"instructions/#remove-command","text":"Removes the specified HTML element(s) of the target or reference file according to the given CSS selector. Usage: #(t|r)remove %<CSS selector string>% #(t|r)remove %<CSS selector string>%[index] #(t|r)remove %<CSS selector string>%[from:to] Examples: #rremove %img%[:] : Removes all images from the reference HTML. #tremove %div.yt-sec% : Removes the first div element having the class name yt-sec from the target HTML.","title":"Remove Command"},{"location":"instructions/#translate-command","text":"Translates the specified HTML element(s) of the target file according to the given CSS selector and the environment variable lang . Uses Google Translate. Note: this command slows down the matching process severely. Usage: #translate %<CSS selector string>% #translate %<CSS selector string>%[index] #translate %<CSS selector string>%[from:to]","title":"Translate Command"},{"location":"instructions/#include-command","text":"Directly replaces itself with the contents of the file it was pointing to. Usage: #include <path to another instruction file> Example: Contents of ./std/hremovers/h1remove.match: #tremove %h1%[:] Contents of ./std/hremovers/h2remove.match: #tremove %h2%[:] Contents of ./std/hremove.match: #include <hremovers/h1remove.match> #include <hremovers/h2remove.match> Contents of ./main.match: #include <std/hremove.match> %img%[:].alt = %img%[:].alt After applying all the includes: Contents of ./main.match: #tremove %h1% #tremove %h2% %img%[:].alt = %img%[:].alt","title":"Include Command"},{"location":"primitives/","text":"Primitives Basic building blocks. CSS Selectors To access any HTML element, the matcher uses CSS selectors. To declare a selector, you have to enclose it with % signs: %<CSS selector string>% Examples: %div[id=\"hero-home\"]% %div.btn-box span strong% %img:nth-child(4)% Selecting Attributes It is possible to select attributes of the element also. Note that only available attributes at the time being are alt , content , lang , href , src , data-src . Basic syntax: %<CSS selector string>%.<attribute> Examples: %img%.alt %html%.lang Special Attributes There are two special attributes -which are actually not attributes- which can be specified with the dot operator: innerHTML and text . By default, if you don't specify any attribute the matcher assumes innerHTML is targeted. innerHTML selects the entire inner HTML content of the element, while the text attribute selects only the text. Examples: %p% is equivalent to %p%.innerHTML %div div p%.text Selecting Multiple Elements By default, this declarations selects the first element that fits the specifications. However, you can use indexing or slicing to operate on multiple items: %div#hero-home%[4] : Selects the 5th element %p.bold%[:4] : Selects the elements from index 0 to 3 %img%[-1] : Selects the last element Combining All %ul li%[:4].text : Selects the text content of first 4 li elements which are the children of an ul . %img%[-1].alt : Selects the alt attribute of the last img element Dictionary Items Matcher preserves a dictionary for some specific operations. Basic Syntax: {root.child.child-of-child.child-of-child-of-child} Example: Let our dictionary be: \"environ\": { \"lang\":\"ar\" }, \"breadcrumbs\": { \"home\":{ \"path\":\"ar\", \"display\":\"\u0627\u0644\u0635\u0641\u062d\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629\" }, \"tools\":{ \"path\":\"ar/tools\", \"display\":\"\u0623\u062f\u0648\u0627\u062a\" } } {environ.lang} returns ar {breadcrumbs.tools.path} returns ar/tools Formatted Strings Basic syntax: f\"some literal string and some {dictionary.item} combined together!\" Examples (with the previously specified dictionary): f\"https://maestra.ai/{breadcrumbs.tools.path}\" returns https://maestra.ai/ar/tools f\"Current language code: {environ.lang}\" return Current language code: ar","title":"Primitives"},{"location":"primitives/#primitives","text":"Basic building blocks.","title":"Primitives"},{"location":"primitives/#css-selectors","text":"To access any HTML element, the matcher uses CSS selectors. To declare a selector, you have to enclose it with % signs: %<CSS selector string>% Examples: %div[id=\"hero-home\"]% %div.btn-box span strong% %img:nth-child(4)%","title":"CSS Selectors"},{"location":"primitives/#selecting-attributes","text":"It is possible to select attributes of the element also. Note that only available attributes at the time being are alt , content , lang , href , src , data-src . Basic syntax: %<CSS selector string>%.<attribute> Examples: %img%.alt %html%.lang","title":"Selecting Attributes"},{"location":"primitives/#special-attributes","text":"There are two special attributes -which are actually not attributes- which can be specified with the dot operator: innerHTML and text . By default, if you don't specify any attribute the matcher assumes innerHTML is targeted. innerHTML selects the entire inner HTML content of the element, while the text attribute selects only the text. Examples: %p% is equivalent to %p%.innerHTML %div div p%.text","title":"Special Attributes"},{"location":"primitives/#selecting-multiple-elements","text":"By default, this declarations selects the first element that fits the specifications. However, you can use indexing or slicing to operate on multiple items: %div#hero-home%[4] : Selects the 5th element %p.bold%[:4] : Selects the elements from index 0 to 3 %img%[-1] : Selects the last element","title":"Selecting Multiple Elements"},{"location":"primitives/#combining-all","text":"%ul li%[:4].text : Selects the text content of first 4 li elements which are the children of an ul . %img%[-1].alt : Selects the alt attribute of the last img element","title":"Combining All"},{"location":"primitives/#dictionary-items","text":"Matcher preserves a dictionary for some specific operations. Basic Syntax: {root.child.child-of-child.child-of-child-of-child} Example: Let our dictionary be: \"environ\": { \"lang\":\"ar\" }, \"breadcrumbs\": { \"home\":{ \"path\":\"ar\", \"display\":\"\u0627\u0644\u0635\u0641\u062d\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629\" }, \"tools\":{ \"path\":\"ar/tools\", \"display\":\"\u0623\u062f\u0648\u0627\u062a\" } } {environ.lang} returns ar {breadcrumbs.tools.path} returns ar/tools","title":"Dictionary Items"},{"location":"primitives/#formatted-strings","text":"Basic syntax: f\"some literal string and some {dictionary.item} combined together!\" Examples (with the previously specified dictionary): f\"https://maestra.ai/{breadcrumbs.tools.path}\" returns https://maestra.ai/ar/tools f\"Current language code: {environ.lang}\" return Current language code: ar","title":"Formatted Strings"}]}